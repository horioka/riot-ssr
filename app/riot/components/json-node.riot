<!-- @format -->

<json-node>
  <style>
    .child {
      padding-left: 1em;
    }
    .key {
      color: cadetblue;
    }
    .key:before {
      margin: 0 0.5em;
      color: var(--color);
      content: var(--content);
      display: inline-block;
      transform: rotate(var(--rotate));
    }
    .key:after {
      color: black;
      content: ":";
      margin: 0 0.5em 0 0;
    }
    .type-string {
      color: chocolate;
    }
    .type-string:before {
      content: '"';
    }
    .type-string:after {
      content: '"';
    }
    .type-number {
      color: dodgerblue;
    }
  </style>

  <div>
    <span
      class="key"
      style="
      --rotate: { state.open ? 90 : 0}deg;
      --color: {state.open ? 'lightgray' : 'gray'};
      --content: '{ typeof props.data == 'object' ? '▶' : '　' }';"
      onclick="{ onToggle }"
    >
      { props.label }
    </span>
    <span class="data-line type-{ props.type }" onclick="{ onToggle }">
      { dataLine(props.data) }
    </span>
  </div>
  <div if="{ state.open }" class="child">
    <template if="{ data instanceof Array }">
      <json-node
        each="{ (data, label) in props.data }"
        label="{ label }"
        data="{ data }"
      ></json-node>
    </template>
    <template
      if="{ !(data instanceof Array) && typeof props.data == 'object' }"
    >
      <json-node
        each="{ e in Object.entries(props.data) }"
        label="{ e[0] }"
        data="{ e[1] ? e[1] : String(e[1]) }"
        type="{ typeof e[1] }"
      ></json-node>
    </template>
  </div>

  <script>
    export default {
      state: {
        open: true,
      },
      onToggle() {
        this.update({ open: !this.state.open });
      },
      dataLine(data, type) {
        if (data instanceof Array) {
          return `[ array (${data.length}) ]`;
        }
        if (typeof data == "object") {
          return "{ object }";
        }
        return data;
      },
    };
  </script>
</json-node>
